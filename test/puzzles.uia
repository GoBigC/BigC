// Test file for BigC puzzles
// Demonstrates solving simple puzzles in BigC

int main() {
    // ============ Puzzle 1: Fibonacci Sequence ============
    _printChar('F'); // Marker for Fibonacci
    
    int n = 10; // Calculate first 10 Fibonacci numbers
    int a = 0;
    int b = 1;
    
    int i = 0;
    while (i < n) {
        _printInt(a); // Expected: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
        
        int temp = a;
        a = b;
        b = temp + b;
        
        i = i + 1;
    }
    
    // // ============ Puzzle 2: Prime Number Checker ============
    // _printChar('P'); // Marker for Prime checker
    
    // int num = 17;
    // bool isPrime = true;
    
    // if (num <= 1) {
    //     isPrime = false;
    // } else {
    //     int divisor = 2;
    //     while (divisor * divisor <= num && isPrime) {
    //         if (num % divisor == 0) {
    //             isPrime = false;
    //         }
    //         divisor = divisor + 1;
    //     }
    // }
    
    // _printInt(num);
    // _printBool(isPrime); // Expected: 1 (true)
    
    // // Try with non-prime
    // num = 15;
    // isPrime = true;
    
    // if (num <= 1) {
    //     isPrime = false;
    // } else {
    //     int divisor = 2;
    //     while (divisor * divisor <= num && isPrime) {
    //         if (num % divisor == 0) {
    //             isPrime = false;
    //         }
    //         divisor = divisor + 1;
    //     }
    // }
    
    // _printInt(num);
    // _printBool(isPrime); // Expected: 0 (false)
    
    // // ============ Puzzle 3: Factorial Calculator ============
    // _printChar('F'); // Marker for Factorial
    
    // int factNum = 5;
    // int factorial = 1;
    
    // int j = 1;
    // while (j <= factNum) {
    //     factorial = factorial * j;
    //     j = j + 1;
    // }
    
    // _printInt(factNum);
    // _printInt(factorial); // Expected: 120
    
    // // ============ Puzzle 4: Binary Search ============
    // _printChar('B'); // Marker for Binary Search
    
    // int arr[10];
    // arr[0] = 2;
    // arr[1] = 5;
    // arr[2] = 8;
    // arr[3] = 12;
    // arr[4] = 16;
    // arr[5] = 23;
    // arr[6] = 38;
    // arr[7] = 56;
    // arr[8] = 72;
    // arr[9] = 91;
    
    // int target = 23;
    // int left = 0;
    // int right = 9;
    // int mid;
    // int found = -1;
    
    // while (left <= right) {
    //     mid = (left + right) / 2;
        
    //     if (arr[mid] == target) {
    //         found = mid;
    //         // Simulate break
    //         left = right + 1;
    //     } else if (arr[mid] < target) {
    //         left = mid + 1;
    //     } else {
    //         right = mid - 1;
    //     }
    // }
    
    // _printInt(target);
    // _printInt(found); // Expected: 5
    
    // // ============ Puzzle 5: Bubble Sort ============
    // _printChar('S'); // Marker for Sort
    
    // int bubbleArr[5];
    // bubbleArr[0] = 64;
    // bubbleArr[1] = 34;
    // bubbleArr[2] = 25;
    // bubbleArr[3] = 12;
    // bubbleArr[4] = 22;
    
    // // Print original array
    // int k = 0;
    // while (k < 5) {
    //     _printInt(bubbleArr[k]); // Expected: 64, 34, 25, 12, 22
    //     k = k + 1;
    // }
    
    // // Bubble sort
    // int i1 = 0;
    // while (i1 < 5) {
    //     int j1 = 0;
    //     while (j1 < 4 - i1) {
    //         if (bubbleArr[j1] > bubbleArr[j1 + 1]) {
    //             // Swap
    //             int temp = bubbleArr[j1];
    //             bubbleArr[j1] = bubbleArr[j1 + 1];
    //             bubbleArr[j1 + 1] = temp;
    //         }
    //         j1 = j1 + 1;
    //     }
    //     i1 = i1 + 1;
    // }
    
    // // Print sorted array
    // _printChar('R'); // Result marker
    // k = 0;
    // while (k < 5) {
    //     _printInt(bubbleArr[k]); // Expected: 12, 22, 25, 34, 64
    //     k = k + 1;
    // }
    
    return 0;
}
