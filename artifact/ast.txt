========== AST ==========
Program (Line 4, Col 0) with 13 declarations
 Declaration 1:
 VarDeclaration (Line 4, Col 0): globalInt of type int with initializer:
   IntegerLiteral (Line 4, Col 16): 42
 Declaration 2:
 VarDeclaration (Line 5, Col 0): globalFloat of type float with initializer:
   FloatLiteral (Line 5, Col 20): 3.141590
 Declaration 3:
 VarDeclaration (Line 6, Col 0): globalBool of type bool with initializer:
   Identifier (Line 6, Col 18): true
 Declaration 4:
 VarDeclaration (Line 7, Col 0): globalChar of type char with initializer:
   CharLiteral (Line 7, Col 18): 'A'
 Declaration 5:
 VarDeclaration (Line 8, Col 0): globalInt2 of type int with initializer:
   UnaryExpression (Line 8, Col 17): Operator '-'
     IntegerLiteral (Line 8, Col 18): 16
 Declaration 6:
 VarDeclaration (Line 9, Col 0): globalFloat2 of type float with initializer:
   UnaryExpression (Line 9, Col 21): Operator '-'
     FloatLiteral (Line 9, Col 22): 1.232100
 Declaration 7:
 VarDeclaration (Line 12, Col 0): globalArray of type array of int with size IntegerLiteral (Line 12, Col 16): 10

 Declaration 8:
 FunctionDeclaration (Line 15, Col 0): fillArray returns void with 2 parameters
   Parameter 1: arr of type array of int with size IntegerLiteral (Line 15, Col 23): 43

   Parameter 2: value of type int
   Body:
   Block (Line 15, Col 39) with 2 items
     Item 1:
     VarDeclaration (Line 16, Col 4): i of type int with initializer:
       IntegerLiteral (Line 16, Col 12): 0
     Item 2:
     WhileStatement (Line 17, Col 4):
       Condition:
       BinaryExpression (Line 17, Col 13): Operator '<'
         Left:
         Identifier (Line 17, Col 11): i
         Right:
         IntegerLiteral (Line 17, Col 15): 5
       Body:
       Block (Line 17, Col 18) with 2 items
         Item 1:
         ExpressionStatement (Line 18, Col 8):
           BinaryExpression (Line 18, Col 15): Operator '='
             Left:
             ArrayAccessExpression (Line 18, Col 11):
               Array:
               Identifier (Line 18, Col 8): arr
               Index:
               Identifier (Line 18, Col 12): i
             Right:
             Identifier (Line 18, Col 17): value
         Item 2:
         ExpressionStatement (Line 19, Col 8):
           BinaryExpression (Line 19, Col 10): Operator '='
             Left:
             Identifier (Line 19, Col 8): i
             Right:
             BinaryExpression (Line 19, Col 14): Operator '+'
               Left:
               Identifier (Line 19, Col 12): i
               Right:
               IntegerLiteral (Line 19, Col 16): 1
 Declaration 9:
 FunctionDeclaration (Line 24, Col 0): sumArray returns int with 1 parameters
   Parameter 1: arr of type array of int with size IntegerLiteral (Line 24, Col 21): 5

   Body:
   Block (Line 24, Col 25) with 4 items
     Item 1:
     VarDeclaration (Line 25, Col 4): i of type int with initializer:
       IntegerLiteral (Line 25, Col 12): 0
     Item 2:
     VarDeclaration (Line 26, Col 4): sum of type int with initializer:
       IntegerLiteral (Line 26, Col 14): 0
     Item 3:
     WhileStatement (Line 28, Col 4):
       Condition:
       BinaryExpression (Line 28, Col 13): Operator '<'
         Left:
         Identifier (Line 28, Col 11): i
         Right:
         IntegerLiteral (Line 28, Col 15): 5
       Body:
       Block (Line 28, Col 18) with 2 items
         Item 1:
         ExpressionStatement (Line 29, Col 8):
           BinaryExpression (Line 29, Col 12): Operator '='
             Left:
             Identifier (Line 29, Col 8): sum
             Right:
             BinaryExpression (Line 29, Col 18): Operator '+'
               Left:
               Identifier (Line 29, Col 14): sum
               Right:
               ArrayAccessExpression (Line 29, Col 23):
                 Array:
                 Identifier (Line 29, Col 20): arr
                 Index:
                 Identifier (Line 29, Col 24): i
         Item 2:
         ExpressionStatement (Line 30, Col 8):
           BinaryExpression (Line 30, Col 10): Operator '='
             Left:
             Identifier (Line 30, Col 8): i
             Right:
             BinaryExpression (Line 30, Col 14): Operator '+'
               Left:
               Identifier (Line 30, Col 12): i
               Right:
               IntegerLiteral (Line 30, Col 16): 1
     Item 4:
     ReturnStatement (Line 33, Col 4):
       Identifier (Line 33, Col 11): sum
 Declaration 10:
 FunctionDeclaration (Line 37, Col 0): max returns int with 2 parameters
   Parameter 1: a of type int
   Parameter 2: b of type int
   Body:
   Block (Line 37, Col 22) with 1 items
     Item 1:
     IfStatement (Line 38, Col 4):
       Condition:
       BinaryExpression (Line 38, Col 10): Operator '>'
         Left:
         Identifier (Line 38, Col 8): a
         Right:
         Identifier (Line 38, Col 12): b
       Then:
       Block (Line 38, Col 15) with 1 items
         Item 1:
         ReturnStatement (Line 39, Col 8):
           Identifier (Line 39, Col 15): a
       Else:
       Block (Line 40, Col 11) with 1 items
         Item 1:
         ReturnStatement (Line 41, Col 8):
           Identifier (Line 41, Col 15): b
 Declaration 11:
 FunctionDeclaration (Line 46, Col 0): calculate returns float with 3 parameters
   Parameter 1: x of type int
   Parameter 2: y of type float
   Parameter 3: condition of type bool
   Body:
   Block (Line 46, Col 48) with 3 items
     Item 1:
     VarDeclaration (Line 47, Col 4): result of type float with initializer:
       FloatLiteral (Line 47, Col 19): 0.000000
     Item 2:
     IfStatement (Line 49, Col 4):
       Condition:
       Identifier (Line 49, Col 8): condition
       Then:
       Block (Line 49, Col 19) with 1 items
         Item 1:
         ExpressionStatement (Line 50, Col 8):
           BinaryExpression (Line 50, Col 15): Operator '='
             Left:
             Identifier (Line 50, Col 8): result
             Right:
             BinaryExpression (Line 50, Col 19): Operator '+'
               Left:
               Identifier (Line 50, Col 17): x
               Right:
               Identifier (Line 50, Col 21): y
       Else:
       Block (Line 51, Col 11) with 1 items
         Item 1:
         ExpressionStatement (Line 52, Col 8):
           BinaryExpression (Line 52, Col 15): Operator '='
             Left:
             Identifier (Line 52, Col 8): result
             Right:
             BinaryExpression (Line 52, Col 19): Operator '-'
               Left:
               Identifier (Line 52, Col 17): x
               Right:
               Identifier (Line 52, Col 21): y
     Item 3:
     ReturnStatement (Line 55, Col 4):
       Identifier (Line 55, Col 11): result
 Declaration 12:
 FunctionDeclaration (Line 59, Col 0): factorial returns int with 1 parameters
   Parameter 1: n of type int
   Body:
   Block (Line 59, Col 21) with 1 items
     Item 1:
     IfStatement (Line 60, Col 4):
       Condition:
       BinaryExpression (Line 60, Col 10): Operator '<='
         Left:
         Identifier (Line 60, Col 8): n
         Right:
         IntegerLiteral (Line 60, Col 13): 1
       Then:
       Block (Line 60, Col 16) with 1 items
         Item 1:
         ReturnStatement (Line 61, Col 8):
           IntegerLiteral (Line 61, Col 15): 1
       Else:
       Block (Line 62, Col 11) with 1 items
         Item 1:
         ReturnStatement (Line 63, Col 8):
           BinaryExpression (Line 63, Col 17): Operator '*'
             Left:
             Identifier (Line 63, Col 15): n
             Right:
             FunctionCallExpression (Line 63, Col 28) with 1 arguments:
               Function:
               Identifier (Line 63, Col 19): factorial
               Argument 1:
                 BinaryExpression (Line 63, Col 31): Operator '-'
                   Left:
                   Identifier (Line 63, Col 29): n
                   Right:
                   IntegerLiteral (Line 63, Col 33): 1
 Declaration 13:
 FunctionDeclaration (Line 68, Col 0): main returns int with 0 parameters
   Body:
   Block (Line 68, Col 11) with 43 items
     Item 1:
     VarDeclaration (Line 70, Col 4): a of type int with initializer:
       IntegerLiteral (Line 70, Col 12): 10
     Item 2:
     VarDeclaration (Line 71, Col 4): b of type int with initializer:
       IntegerLiteral (Line 71, Col 12): 20
     Item 3:
     VarDeclaration (Line 72, Col 4): f of type float with initializer:
       FloatLiteral (Line 72, Col 14): 1.500000
     Item 4:
     VarDeclaration (Line 73, Col 4): flag of type bool with initializer:
       Identifier (Line 73, Col 16): false
     Item 5:
     VarDeclaration (Line 74, Col 4): c of type char with initializer:
       CharLiteral (Line 74, Col 13): 'X'
     Item 6:
     VarDeclaration (Line 77, Col 4): numbers of type array of int with size IntegerLiteral (Line 77, Col 16): 5

     Item 7:
     ExpressionStatement (Line 80, Col 4):
       BinaryExpression (Line 80, Col 15): Operator '='
         Left:
         ArrayAccessExpression (Line 80, Col 11):
           Array:
           Identifier (Line 80, Col 4): numbers
           Index:
           IntegerLiteral (Line 80, Col 12): 0
         Right:
         IntegerLiteral (Line 80, Col 17): 10
     Item 8:
     ExpressionStatement (Line 81, Col 4):
       BinaryExpression (Line 81, Col 15): Operator '='
         Left:
         ArrayAccessExpression (Line 81, Col 11):
           Array:
           Identifier (Line 81, Col 4): numbers
           Index:
           IntegerLiteral (Line 81, Col 12): 1
         Right:
         IntegerLiteral (Line 81, Col 17): 20
     Item 9:
     ExpressionStatement (Line 82, Col 4):
       BinaryExpression (Line 82, Col 15): Operator '='
         Left:
         ArrayAccessExpression (Line 82, Col 11):
           Array:
           Identifier (Line 82, Col 4): numbers
           Index:
           IntegerLiteral (Line 82, Col 12): 2
         Right:
         IntegerLiteral (Line 82, Col 17): 30
     Item 10:
     ExpressionStatement (Line 83, Col 4):
       BinaryExpression (Line 83, Col 15): Operator '='
         Left:
         ArrayAccessExpression (Line 83, Col 11):
           Array:
           Identifier (Line 83, Col 4): numbers
           Index:
           IntegerLiteral (Line 83, Col 12): 3
         Right:
         IntegerLiteral (Line 83, Col 17): 40
     Item 11:
     ExpressionStatement (Line 84, Col 4):
       BinaryExpression (Line 84, Col 15): Operator '='
         Left:
         ArrayAccessExpression (Line 84, Col 11):
           Array:
           Identifier (Line 84, Col 4): numbers
           Index:
           IntegerLiteral (Line 84, Col 12): 4
         Right:
         IntegerLiteral (Line 84, Col 17): 50
     Item 12:
     VarDeclaration (Line 87, Col 4): arraySum of type int with initializer:
       BinaryExpression (Line 87, Col 30): Operator '+'
         Left:
         ArrayAccessExpression (Line 87, Col 26):
           Array:
           Identifier (Line 87, Col 19): numbers
           Index:
           IntegerLiteral (Line 87, Col 27): 0
         Right:
         ArrayAccessExpression (Line 87, Col 39):
           Array:
           Identifier (Line 87, Col 32): numbers
           Index:
           IntegerLiteral (Line 87, Col 40): 1
     Item 13:
     VarDeclaration (Line 90, Col 4): index of type int with initializer:
       IntegerLiteral (Line 90, Col 16): 2
     Item 14:
     VarDeclaration (Line 91, Col 4): valueAtIndex of type int with initializer:
       ArrayAccessExpression (Line 91, Col 30):
         Array:
         Identifier (Line 91, Col 23): numbers
         Index:
         Identifier (Line 91, Col 31): index
     Item 15:
     VarDeclaration (Line 92, Col 4): valueAtExpr of type int with initializer:
       ArrayAccessExpression (Line 92, Col 29):
         Array:
         Identifier (Line 92, Col 22): numbers
         Index:
         BinaryExpression (Line 92, Col 36): Operator '+'
           Left:
           Identifier (Line 92, Col 30): index
           Right:
           IntegerLiteral (Line 92, Col 38): 1
     Item 16:
     VarDeclaration (Line 95, Col 4): complexArrayExpr of type int with initializer:
       ArrayAccessExpression (Line 95, Col 34):
         Array:
         Identifier (Line 95, Col 27): numbers
         Index:
         BinaryExpression (Line 95, Col 46): Operator '/'
           Left:
           ArrayAccessExpression (Line 95, Col 42):
             Array:
             Identifier (Line 95, Col 35): numbers
             Index:
             IntegerLiteral (Line 95, Col 43): 0
           Right:
           IntegerLiteral (Line 95, Col 48): 10
     Item 17:
     ExpressionStatement (Line 98, Col 4):
       FunctionCallExpression (Line 98, Col 13) with 2 arguments:
         Function:
         Identifier (Line 98, Col 4): fillArray
         Argument 1:
           Identifier (Line 98, Col 14): numbers
         Argument 2:
           IntegerLiteral (Line 98, Col 23): 5
     Item 18:
     VarDeclaration (Line 101, Col 4): totalSum of type int with initializer:
       FunctionCallExpression (Line 101, Col 27) with 1 arguments:
         Function:
         Identifier (Line 101, Col 19): sumArray
         Argument 1:
           Identifier (Line 101, Col 28): numbers
     Item 19:
     VarDeclaration (Line 104, Col 4): sum of type int with initializer:
       BinaryExpression (Line 104, Col 16): Operator '+'
         Left:
         Identifier (Line 104, Col 14): a
         Right:
         Identifier (Line 104, Col 18): b
     Item 20:
     VarDeclaration (Line 105, Col 4): diff of type int with initializer:
       BinaryExpression (Line 105, Col 17): Operator '-'
         Left:
         Identifier (Line 105, Col 15): b
         Right:
         Identifier (Line 105, Col 19): a
     Item 21:
     VarDeclaration (Line 106, Col 4): product of type int with initializer:
       BinaryExpression (Line 106, Col 20): Operator '*'
         Left:
         Identifier (Line 106, Col 18): a
         Right:
         Identifier (Line 106, Col 22): b
     Item 22:
     VarDeclaration (Line 107, Col 4): quotient of type int with initializer:
       BinaryExpression (Line 107, Col 21): Operator '/'
         Left:
         Identifier (Line 107, Col 19): b
         Right:
         Identifier (Line 107, Col 23): a
     Item 23:
     VarDeclaration (Line 110, Col 4): complexExpr of type float with initializer:
       BinaryExpression (Line 110, Col 32): Operator '*'
         Left:
         BinaryExpression (Line 110, Col 27): Operator '+'
           Left:
           Identifier (Line 110, Col 25): a
           Right:
           Identifier (Line 110, Col 29): b
         Right:
         BinaryExpression (Line 110, Col 37): Operator '/'
           Left:
           Identifier (Line 110, Col 35): f
           Right:
           BinaryExpression (Line 110, Col 42): Operator '-'
             Left:
             Identifier (Line 110, Col 40): b
             Right:
             Identifier (Line 110, Col 44): a
     Item 24:
     VarDeclaration (Line 113, Col 4): test1 of type bool with initializer:
       BinaryExpression (Line 113, Col 19): Operator '<'
         Left:
         Identifier (Line 113, Col 17): a
         Right:
         Identifier (Line 113, Col 21): b
     Item 25:
     VarDeclaration (Line 114, Col 4): test2 of type bool with initializer:
       BinaryExpression (Line 114, Col 19): Operator '>'
         Left:
         Identifier (Line 114, Col 17): a
         Right:
         Identifier (Line 114, Col 21): b
     Item 26:
     VarDeclaration (Line 115, Col 4): test3 of type bool with initializer:
       BinaryExpression (Line 115, Col 19): Operator '<='
         Left:
         Identifier (Line 115, Col 17): a
         Right:
         Identifier (Line 115, Col 22): b
     Item 27:
     VarDeclaration (Line 116, Col 4): test4 of type bool with initializer:
       BinaryExpression (Line 116, Col 19): Operator '>='
         Left:
         Identifier (Line 116, Col 17): a
         Right:
         Identifier (Line 116, Col 22): b
     Item 28:
     VarDeclaration (Line 119, Col 4): equal of type bool with initializer:
       BinaryExpression (Line 119, Col 19): Operator '=='
         Left:
         Identifier (Line 119, Col 17): a
         Right:
         Identifier (Line 119, Col 22): b
     Item 29:
     VarDeclaration (Line 120, Col 4): notEqual of type bool with initializer:
       BinaryExpression (Line 120, Col 22): Operator '!='
         Left:
         Identifier (Line 120, Col 20): a
         Right:
         Identifier (Line 120, Col 25): b
     Item 30:
     VarDeclaration (Line 123, Col 4): logicalExpr1 of type bool with initializer:
       BinaryExpression (Line 123, Col 30): Operator '&&'
         Left:
         BinaryExpression (Line 123, Col 26): Operator '<'
           Left:
           Identifier (Line 123, Col 24): a
           Right:
           Identifier (Line 123, Col 28): b
         Right:
         BinaryExpression (Line 123, Col 35): Operator '>'
           Left:
           Identifier (Line 123, Col 33): f
           Right:
           FloatLiteral (Line 123, Col 37): 1.000000
     Item 31:
     VarDeclaration (Line 124, Col 4): logicalExpr2 of type bool with initializer:
       BinaryExpression (Line 124, Col 30): Operator '||'
         Left:
         BinaryExpression (Line 124, Col 26): Operator '>'
           Left:
           Identifier (Line 124, Col 24): a
           Right:
           Identifier (Line 124, Col 28): b
         Right:
         BinaryExpression (Line 124, Col 35): Operator '<'
           Left:
           Identifier (Line 124, Col 33): f
           Right:
           FloatLiteral (Line 124, Col 37): 2.000000
     Item 32:
     VarDeclaration (Line 125, Col 4): logicalExpr3 of type bool with initializer:
       BinaryExpression (Line 125, Col 34): Operator '&&'
         Left:
         UnaryExpression (Line 125, Col 24): Operator '!'
           BinaryExpression (Line 125, Col 28): Operator '=='
             Left:
             Identifier (Line 125, Col 26): a
             Right:
             Identifier (Line 125, Col 31): b
         Right:
         BinaryExpression (Line 125, Col 47): Operator '||'
           Left:
           BinaryExpression (Line 125, Col 40): Operator '>='
             Left:
             Identifier (Line 125, Col 38): f
             Right:
             FloatLiteral (Line 125, Col 43): 1.000000
           Right:
           BinaryExpression (Line 125, Col 52): Operator '<='
             Left:
             Identifier (Line 125, Col 50): b
             Right:
             IntegerLiteral (Line 125, Col 55): 20
     Item 33:
     VarDeclaration (Line 128, Col 4): assignTest of type bool with initializer:
       BinaryExpression (Line 128, Col 28): Operator '='
         Left:
         Identifier (Line 128, Col 23): flag
         Right:
         Identifier (Line 128, Col 30): true
     Item 34:
     VarDeclaration (Line 131, Col 4): maxValue of type int with initializer:
       FunctionCallExpression (Line 131, Col 22) with 2 arguments:
         Function:
         Identifier (Line 131, Col 19): max
         Argument 1:
           Identifier (Line 131, Col 23): a
         Argument 2:
           Identifier (Line 131, Col 26): b
     Item 35:
     VarDeclaration (Line 132, Col 4): calcResult of type float with initializer:
       FunctionCallExpression (Line 132, Col 32) with 3 arguments:
         Function:
         Identifier (Line 132, Col 23): calculate
         Argument 1:
           Identifier (Line 132, Col 33): a
         Argument 2:
           Identifier (Line 132, Col 36): f
         Argument 3:
           Identifier (Line 132, Col 39): flag
     Item 36:
     VarDeclaration (Line 133, Col 4): fact5 of type int with initializer:
       FunctionCallExpression (Line 133, Col 25) with 1 arguments:
         Function:
         Identifier (Line 133, Col 16): factorial
         Argument 1:
           IntegerLiteral (Line 133, Col 26): 5
     Item 37:
     VarDeclaration (Line 136, Col 4): exprWithCall of type int with initializer:
       BinaryExpression (Line 136, Col 25): Operator '+'
         Left:
         Identifier (Line 136, Col 23): a
         Right:
         FunctionCallExpression (Line 136, Col 36) with 1 arguments:
           Function:
           Identifier (Line 136, Col 27): factorial
           Argument 1:
             IntegerLiteral (Line 136, Col 37): 3
     Item 38:
     VarDeclaration (Line 139, Col 4): nestedCall of type int with initializer:
       FunctionCallExpression (Line 139, Col 24) with 2 arguments:
         Function:
         Identifier (Line 139, Col 21): max
         Argument 1:
           FunctionCallExpression (Line 139, Col 34) with 1 arguments:
             Function:
             Identifier (Line 139, Col 25): factorial
             Argument 1:
               IntegerLiteral (Line 139, Col 35): 2
         Argument 2:
           FunctionCallExpression (Line 139, Col 48) with 1 arguments:
             Function:
             Identifier (Line 139, Col 39): factorial
             Argument 1:
               IntegerLiteral (Line 139, Col 49): 3
     Item 39:
     VarDeclaration (Line 142, Col 4): maxArrayValue of type int with initializer:
       FunctionCallExpression (Line 142, Col 27) with 2 arguments:
         Function:
         Identifier (Line 142, Col 24): max
         Argument 1:
           ArrayAccessExpression (Line 142, Col 35):
             Array:
             Identifier (Line 142, Col 28): numbers
             Index:
             IntegerLiteral (Line 142, Col 36): 1
         Argument 2:
           ArrayAccessExpression (Line 142, Col 47):
             Array:
             Identifier (Line 142, Col 40): numbers
             Index:
             IntegerLiteral (Line 142, Col 48): 3
     Item 40:
     IfStatement (Line 145, Col 4):
       Condition:
       BinaryExpression (Line 145, Col 19): Operator '>'
         Left:
         ArrayAccessExpression (Line 145, Col 15):
           Array:
           Identifier (Line 145, Col 8): numbers
           Index:
           IntegerLiteral (Line 145, Col 16): 0
         Right:
         ArrayAccessExpression (Line 145, Col 28):
           Array:
           Identifier (Line 145, Col 21): numbers
           Index:
           IntegerLiteral (Line 145, Col 29): 1
       Then:
       Block (Line 145, Col 33) with 1 items
         Item 1:
         ExpressionStatement (Line 146, Col 8):
           BinaryExpression (Line 146, Col 19): Operator '='
             Left:
             ArrayAccessExpression (Line 146, Col 15):
               Array:
               Identifier (Line 146, Col 8): numbers
               Index:
               IntegerLiteral (Line 146, Col 16): 2
             Right:
             ArrayAccessExpression (Line 146, Col 28):
               Array:
               Identifier (Line 146, Col 21): numbers
               Index:
               IntegerLiteral (Line 146, Col 29): 0
       Else:
       Block (Line 147, Col 11) with 1 items
         Item 1:
         ExpressionStatement (Line 148, Col 8):
           BinaryExpression (Line 148, Col 19): Operator '='
             Left:
             ArrayAccessExpression (Line 148, Col 15):
               Array:
               Identifier (Line 148, Col 8): numbers
               Index:
               IntegerLiteral (Line 148, Col 16): 2
             Right:
             ArrayAccessExpression (Line 148, Col 28):
               Array:
               Identifier (Line 148, Col 21): numbers
               Index:
               IntegerLiteral (Line 148, Col 29): 1
     Item 41:
     VarDeclaration (Line 152, Col 4): j of type int with initializer:
       IntegerLiteral (Line 152, Col 12): 0
     Item 42:
     WhileStatement (Line 153, Col 4):
       Condition:
       BinaryExpression (Line 153, Col 17): Operator '&&'
         Left:
         BinaryExpression (Line 153, Col 13): Operator '<'
           Left:
           Identifier (Line 153, Col 11): j
           Right:
           IntegerLiteral (Line 153, Col 15): 5
         Right:
         BinaryExpression (Line 153, Col 31): Operator '<'
           Left:
           ArrayAccessExpression (Line 153, Col 27):
             Array:
             Identifier (Line 153, Col 20): numbers
             Index:
             Identifier (Line 153, Col 28): j
           Right:
           IntegerLiteral (Line 153, Col 33): 100
       Body:
       Block (Line 153, Col 38) with 2 items
         Item 1:
         ExpressionStatement (Line 154, Col 8):
           BinaryExpression (Line 154, Col 19): Operator '='
             Left:
             ArrayAccessExpression (Line 154, Col 15):
               Array:
               Identifier (Line 154, Col 8): numbers
               Index:
               Identifier (Line 154, Col 16): j
             Right:
             BinaryExpression (Line 154, Col 32): Operator '*'
               Left:
               ArrayAccessExpression (Line 154, Col 28):
                 Array:
                 Identifier (Line 154, Col 21): numbers
                 Index:
                 Identifier (Line 154, Col 29): j
               Right:
               IntegerLiteral (Line 154, Col 34): 2
         Item 2:
         ExpressionStatement (Line 155, Col 8):
           BinaryExpression (Line 155, Col 10): Operator '='
             Left:
             Identifier (Line 155, Col 8): j
             Right:
             BinaryExpression (Line 155, Col 14): Operator '+'
               Left:
               Identifier (Line 155, Col 12): j
               Right:
               IntegerLiteral (Line 155, Col 16): 1
     Item 43:
     ReturnStatement (Line 159, Col 4):
       BinaryExpression (Line 159, Col 22): Operator '+'
         Left:
         ArrayAccessExpression (Line 159, Col 18):
           Array:
           Identifier (Line 159, Col 11): numbers
           Index:
           IntegerLiteral (Line 159, Col 19): 4
         Right:
         FunctionCallExpression (Line 159, Col 33) with 1 arguments:
           Function:
           Identifier (Line 159, Col 24): factorial
           Argument 1:
             BinaryExpression (Line 159, Col 45): Operator '/'
               Left:
               ArrayAccessExpression (Line 159, Col 41):
                 Array:
                 Identifier (Line 159, Col 34): numbers
                 Index:
                 IntegerLiteral (Line 159, Col 42): 0
               Right:
               IntegerLiteral (Line 159, Col 47): 10
