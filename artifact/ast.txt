========== AST ==========
Program (Line 1, Col 0) with 2 declarations
 Declaration 1:
 VarDeclaration (Line 1, Col 0): x of type int with initializer:
   IntegerLiteral (Line 1, Col 8): 10
 Declaration 2:
 FunctionDeclaration (Line 3, Col 0): main returns int with 0 parameters
   Body:
   Block (Line 3, Col 11) with 11 items
     Item 1:
     VarDeclaration (Line 5, Col 4): addInt of type int with initializer:
       BinaryExpression (Line 5, Col 19): Operator '+'
         Left:
         IntegerLiteral (Line 5, Col 17): 1
         Right:
         IntegerLiteral (Line 5, Col 21): 2050
     Item 2:
     ExpressionStatement (Line 6, Col 4):
       FunctionCallExpression (Line 6, Col 13) with 1 arguments:
         Function:
         Identifier (Line 6, Col 4): _printInt
         Argument 1:
           Identifier (Line 6, Col 14): addInt
     Item 3:
     VarDeclaration (Line 8, Col 4): subInt of type int with initializer:
       BinaryExpression (Line 8, Col 19): Operator '-'
         Left:
         IntegerLiteral (Line 8, Col 17): 5
         Right:
         IntegerLiteral (Line 8, Col 21): 2
     Item 4:
     ExpressionStatement (Line 9, Col 4):
       FunctionCallExpression (Line 9, Col 13) with 1 arguments:
         Function:
         Identifier (Line 9, Col 4): _printInt
         Argument 1:
           Identifier (Line 9, Col 14): subInt
     Item 5:
     VarDeclaration (Line 11, Col 4): mulInt of type int with initializer:
       BinaryExpression (Line 11, Col 19): Operator '*'
         Left:
         IntegerLiteral (Line 11, Col 17): 3
         Right:
         IntegerLiteral (Line 11, Col 21): 4
     Item 6:
     ExpressionStatement (Line 12, Col 4):
       FunctionCallExpression (Line 12, Col 13) with 1 arguments:
         Function:
         Identifier (Line 12, Col 4): _printInt
         Argument 1:
           Identifier (Line 12, Col 14): mulInt
     Item 7:
     VarDeclaration (Line 14, Col 4): divInt of type int with initializer:
       BinaryExpression (Line 14, Col 19): Operator '/'
         Left:
         IntegerLiteral (Line 14, Col 17): 8
         Right:
         IntegerLiteral (Line 14, Col 21): 2
     Item 8:
     ExpressionStatement (Line 15, Col 4):
       FunctionCallExpression (Line 15, Col 13) with 1 arguments:
         Function:
         Identifier (Line 15, Col 4): _printInt
         Argument 1:
           Identifier (Line 15, Col 14): divInt
     Item 9:
     VarDeclaration (Line 17, Col 4): literalInt of type int with initializer:
       IntegerLiteral (Line 17, Col 21): 4
     Item 10:
     ExpressionStatement (Line 18, Col 4):
       FunctionCallExpression (Line 18, Col 13) with 1 arguments:
         Function:
         Identifier (Line 18, Col 4): _printInt
         Argument 1:
           Identifier (Line 18, Col 14): literalInt
     Item 11:
     ReturnStatement (Line 100, Col 4):
       IntegerLiteral (Line 100, Col 11): 0
