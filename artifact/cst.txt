(
	program (
		declaration (
			type int
		)
		globalInt
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														postfixExpression (
															primaryExpression (
																constant 42
															)))))))))))))
			;))
	(
		declaration (
			type float
		)
		globalFloat
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														postfixExpression (
															primaryExpression (
																constant 3.14159
															)))))))))))))
			;))
	(
		declaration (
			type bool
		)
		globalBool
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														postfixExpression (
															primaryExpression true
														))))))))))))
			;))
	(
		declaration (
			type char
		)
		globalChar
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														postfixExpression (
															primaryExpression (
																constant 'A'
															)))))))))))))
			;))
	(
		declaration (
			type int
		)
		globalInt2
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														unaryOperator -
													)
													(
														unaryExpression (
															postfixExpression (
																primaryExpression (
																	constant 16
																))))))))))))))
			;))
	(
		declaration (
			type float
		)
		globalFloat2
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														unaryOperator -
													)
													(
														unaryExpression (
															postfixExpression (
																primaryExpression (
																	constant 1.2321
																))))))))))))))
			;))
	(
		declaration (
			type int
		)
		globalArray
		(
			arrayNotation [ (
				expression (
					assignmentExpression (
						logicalOrExpression (
							logicalAndExpression (
								equalityExpression (
									comparisonExpression (
										additionExpression (
											multiplicationExpression (
												unaryExpression (
													postfixExpression (
														primaryExpression (
															constant 10
														))))))))))))
			])
		(
			declarationRemainder ;
		))
	(
		declaration (
			type void
		)
		fillArray
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						arr
						(
							arrayNotation [ (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression (
																			constant 43
																		))))))))))))
							]))
					,
					(
						parameter (
							type int
						)
						value))
				)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						i
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			)))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								whileStatement while (
									(
										expression (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression i
																			)))))
															(
																comparisonRest (
																	comparisonOperator <
																)
																(
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression (
																						constant 5
																					)))))))))))))
									)
								(
									block { (
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression arr
																						)
																						(
																							arrayAccess [ (
																								expression (
																									assignmentExpression (
																										logicalOrExpression (
																											logicalAndExpression (
																												equalityExpression (
																													comparisonExpression (
																														additionExpression (
																															multiplicationExpression (
																																unaryExpression (
																																	postfixExpression (
																																		primaryExpression i
																																	)))))))))))
																							])))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression value
																								)))))))))))))
												;)))
									(
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression i
																						)))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression i
																								))))
																					(
																						additionExpressionRest (
																							addSubtractOperator +
																						)
																						(
																							multiplicationExpression (
																								unaryExpression (
																									postfixExpression (
																										primaryExpression (
																											constant 1
																										)))))))))))))))
												;)))
									})))))
				})))
	(
		declaration (
			type int
		)
		sumArray
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						arr
						(
							arrayNotation [ (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression (
																			constant 5
																		))))))))))))
							])))
				)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						i
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						sum
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			)))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								whileStatement while (
									(
										expression (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression i
																			)))))
															(
																comparisonRest (
																	comparisonOperator <
																)
																(
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression (
																						constant 5
																					)))))))))))))
									)
								(
									block { (
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression sum
																						)))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression sum
																								))))
																					(
																						additionExpressionRest (
																							addSubtractOperator +
																						)
																						(
																							multiplicationExpression (
																								unaryExpression (
																									postfixExpression (
																										primaryExpression arr
																									)
																									(
																										arrayAccess [ (
																											expression (
																												assignmentExpression (
																													logicalOrExpression (
																														logicalAndExpression (
																															equalityExpression (
																																comparisonExpression (
																																	additionExpression (
																																		multiplicationExpression (
																																			unaryExpression (
																																				postfixExpression (
																																					primaryExpression i
																																				)))))))))))
																										]))))))))))))))
												;)))
									(
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression i
																						)))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression i
																								))))
																					(
																						additionExpressionRest (
																							addSubtractOperator +
																						)
																						(
																							multiplicationExpression (
																								unaryExpression (
																									postfixExpression (
																										primaryExpression (
																											constant 1
																										)))))))))))))))
												;)))
									})))))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression sum
																		)))))))))))
								;))))
				})))
	(
		declaration (
			type int
		)
		max
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						a)
					,
					(
						parameter (
							type int
						)
						b))
				)
			(
				block { (
					blockItem (
						statement (
							ifStatement if (
								(
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator >
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			))))))))))))
								)
							(
								block { (
									blockItem (
										statement (
											nonIfStatement (
												returnStatement return (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression a
																						)))))))))))
												;))))
								})
							(
								elseClause else (
									block { (
										blockItem (
											statement (
												nonIfStatement (
													returnStatement return (
														expression (
															assignmentExpression (
																logicalOrExpression (
																	logicalAndExpression (
																		equalityExpression (
																			comparisonExpression (
																				additionExpression (
																					multiplicationExpression (
																						unaryExpression (
																							postfixExpression (
																								primaryExpression b
																							)))))))))))
													;))))
									})))))
				})))
	(
		declaration (
			type float
		)
		calculate
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						x)
					,
					(
						parameter (
							type float
						)
						y)
					,
					(
						parameter (
							type bool
						)
						condition))
				)
			(
				block { (
					blockItem (
						declaration (
							type float
						)
						result
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0.0
																			)))))))))))))
							;)))
				(
					blockItem (
						statement (
							ifStatement if (
								(
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression condition
																		)))))))))))
								)
							(
								block { (
									blockItem (
										statement (
											nonIfStatement (
												expression (
													assignmentExpression (
														logicalOrExpression (
															logicalAndExpression (
																equalityExpression (
																	comparisonExpression (
																		additionExpression (
																			multiplicationExpression (
																				unaryExpression (
																					postfixExpression (
																						primaryExpression result
																					)))))))))
													(
														assignmentRest = (
															assignmentExpression (
																logicalOrExpression (
																	logicalAndExpression (
																		equalityExpression (
																			comparisonExpression (
																				additionExpression (
																					multiplicationExpression (
																						unaryExpression (
																							postfixExpression (
																								primaryExpression x
																							))))
																				(
																					additionExpressionRest (
																						addSubtractOperator +
																					)
																					(
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression y
																								))))))))))))))
											;)))
								})
							(
								elseClause else (
									block { (
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression result
																						)))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression x
																								))))
																					(
																						additionExpressionRest (
																							addSubtractOperator -
																						)
																						(
																							multiplicationExpression (
																								unaryExpression (
																									postfixExpression (
																										primaryExpression y
																									))))))))))))))
												;)))
									})))))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression result
																		)))))))))))
								;))))
				})))
	(
		declaration (
			type int
		)
		factorial
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						n))
				)
			(
				block { (
					blockItem (
						statement (
							ifStatement if (
								(
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression n
																		)))))
														(
															comparisonRest (
																comparisonOperator <=
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 1
																				)))))))))))))
								)
							(
								block { (
									blockItem (
										statement (
											nonIfStatement (
												returnStatement return (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression (
																								constant 1
																							))))))))))))
												;))))
								})
							(
								elseClause else (
									block { (
										blockItem (
											statement (
												nonIfStatement (
													returnStatement return (
														expression (
															assignmentExpression (
																logicalOrExpression (
																	logicalAndExpression (
																		equalityExpression (
																			comparisonExpression (
																				additionExpression (
																					multiplicationExpression (
																						unaryExpression (
																							postfixExpression (
																								primaryExpression n
																							)))
																					(
																						multiplicationExpressionRest (
																							multDivModOperator *
																						)
																						(
																							unaryExpression (
																								postfixExpression (
																									primaryExpression factorial
																								)
																								(
																									functionCallArgs (
																										(
																											argList (
																												assignmentExpression (
																													logicalOrExpression (
																														logicalAndExpression (
																															equalityExpression (
																																comparisonExpression (
																																	additionExpression (
																																		multiplicationExpression (
																																			unaryExpression (
																																				postfixExpression (
																																					primaryExpression n
																																				))))
																																	(
																																		additionExpressionRest (
																																			addSubtractOperator -
																																		)
																																		(
																																			multiplicationExpression (
																																				unaryExpression (
																																					postfixExpression (
																																						primaryExpression (
																																							constant 1
																																						)))))))))))))
																										)))))))))))))
													;))))
									})))))
				})))
	(
		declaration (
			type int
		)
		main
		(
			declarationRemainder (
				
			)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						a
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 10
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						b
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 20
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type float
						)
						f
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 1.5
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						flag
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression false
																		))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type char
						)
						c
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 'X'
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						numbers
						(
							arrayNotation [ (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression (
																			constant 5
																		))))))))))))
							])
						(
							declarationRemainder ;
						)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression numbers
																	)
																	(
																		arrayAccess [ (
																			expression (
																				assignmentExpression (
																					logicalOrExpression (
																						logicalAndExpression (
																							equalityExpression (
																								comparisonExpression (
																									additionExpression (
																										multiplicationExpression (
																											unaryExpression (
																												postfixExpression (
																													primaryExpression (
																														constant 0
																													))))))))))))
																		])))))))))
									(
										assignmentRest = (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 10
																				))))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression numbers
																	)
																	(
																		arrayAccess [ (
																			expression (
																				assignmentExpression (
																					logicalOrExpression (
																						logicalAndExpression (
																							equalityExpression (
																								comparisonExpression (
																									additionExpression (
																										multiplicationExpression (
																											unaryExpression (
																												postfixExpression (
																													primaryExpression (
																														constant 1
																													))))))))))))
																		])))))))))
									(
										assignmentRest = (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 20
																				))))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression numbers
																	)
																	(
																		arrayAccess [ (
																			expression (
																				assignmentExpression (
																					logicalOrExpression (
																						logicalAndExpression (
																							equalityExpression (
																								comparisonExpression (
																									additionExpression (
																										multiplicationExpression (
																											unaryExpression (
																												postfixExpression (
																													primaryExpression (
																														constant 2
																													))))))))))))
																		])))))))))
									(
										assignmentRest = (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 30
																				))))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression numbers
																	)
																	(
																		arrayAccess [ (
																			expression (
																				assignmentExpression (
																					logicalOrExpression (
																						logicalAndExpression (
																							equalityExpression (
																								comparisonExpression (
																									additionExpression (
																										multiplicationExpression (
																											unaryExpression (
																												postfixExpression (
																													primaryExpression (
																														constant 3
																													))))))))))))
																		])))))))))
									(
										assignmentRest = (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 40
																				))))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression numbers
																	)
																	(
																		arrayAccess [ (
																			expression (
																				assignmentExpression (
																					logicalOrExpression (
																						logicalAndExpression (
																							equalityExpression (
																								comparisonExpression (
																									additionExpression (
																										multiplicationExpression (
																											unaryExpression (
																												postfixExpression (
																													primaryExpression (
																														constant 4
																													))))))))))))
																		])))))))))
									(
										assignmentRest = (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 50
																				))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						arraySum
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression (
																															constant 0
																														))))))))))))
																			]))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression numbers
																			)
																			(
																				arrayAccess [ (
																					expression (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															))))))))))))
																				])))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						index
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 2
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						valueAtIndex
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression index
																													)))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						valueAtExpr
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression index
																													))))
																										(
																											additionExpressionRest (
																												addSubtractOperator +
																											)
																											(
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															)))))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						complexArrayExpr
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression numbers
																													)
																													(
																														arrayAccess [ (
																															expression (
																																assignmentExpression (
																																	logicalOrExpression (
																																		logicalAndExpression (
																																			equalityExpression (
																																				comparisonExpression (
																																					additionExpression (
																																						multiplicationExpression (
																																							unaryExpression (
																																								postfixExpression (
																																									primaryExpression (
																																										constant 0
																																									))))))))))))
																														])))
																											(
																												multiplicationExpressionRest (
																													multDivModOperator /
																												)
																												(
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 10
																															)))))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression fillArray
																	)
																	(
																		functionCallArgs (
																			(
																				argList (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression numbers
																													))))))))))
																				,
																				(
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression (
																															constant 5
																														))))))))))))
																			))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						totalSum
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression sumArray
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression numbers
																														)))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						sum
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						diff
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression b
																		))))
															(
																additionExpressionRest (
																	addSubtractOperator -
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression a
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						product
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))
																(
																	multiplicationExpressionRest (
																		multDivModOperator *
																	)
																	(
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						quotient
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression b
																		)))
																(
																	multiplicationExpressionRest (
																		multDivModOperator /
																	)
																	(
																		unaryExpression (
																			postfixExpression (
																				primaryExpression a
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type float
						)
						complexExpr
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				(
																					expression (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression a
																														))))
																											(
																												additionExpressionRest (
																													addSubtractOperator +
																												)
																												(
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression b
																															))))))))))))
																				))))
																(
																	multiplicationExpressionRest (
																		multDivModOperator *
																	)
																	(
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					(
																						expression (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression f
																															)))
																													(
																														multiplicationExpressionRest (
																															multDivModOperator /
																														)
																														(
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression (
																																		(
																																			expression (
																																				assignmentExpression (
																																					logicalOrExpression (
																																						logicalAndExpression (
																																							equalityExpression (
																																								comparisonExpression (
																																									additionExpression (
																																										multiplicationExpression (
																																											unaryExpression (
																																												postfixExpression (
																																													primaryExpression b
																																												))))
																																									(
																																										additionExpressionRest (
																																											addSubtractOperator -
																																										)
																																										(
																																											multiplicationExpression (
																																												unaryExpression (
																																													postfixExpression (
																																														primaryExpression a
																																													))))))))))))
																																		)))))))))))))
																					))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						test1
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator <
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						test2
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator >
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						test3
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator <=
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						test4
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator >=
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						equal
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		))))))
													(
														equalityRest (
															equalityOperator ==
														)
														(
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						notEqual
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		))))))
													(
														equalityRest (
															equalityOperator !=
														)
														(
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						logicalExpr1
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator <
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			))))))))
												(
													logicalAndRest && (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression f
																			)))))
															(
																comparisonRest (
																	comparisonOperator >
																)
																(
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression (
																						constant 1.0
																					)))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						logicalExpr2
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		)))))
														(
															comparisonRest (
																comparisonOperator >
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression b
																			)))))))))
											(
												logicalOrRest || (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression f
																			)))))
															(
																comparisonRest (
																	comparisonOperator <
																)
																(
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression (
																						constant 2.0
																					)))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						logicalExpr3
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		unaryOperator !
																	)
																	(
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					(
																						expression (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression a
																															))))))
																										(
																											equalityRest (
																												equalityOperator ==
																											)
																											(
																												comparisonExpression (
																													additionExpression (
																														multiplicationExpression (
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression b
																																))))))))))))
																					)))))))))
												(
													logicalAndRest && (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					(
																						expression (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression f
																															)))))
																											(
																												comparisonRest (
																													comparisonOperator >=
																												)
																												(
																													additionExpression (
																														multiplicationExpression (
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression (
																																		constant 1.0
																																	))))))))))
																								(
																									logicalOrRest || (
																										logicalAndExpression (
																											equalityExpression (
																												comparisonExpression (
																													additionExpression (
																														multiplicationExpression (
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression b
																																)))))
																												(
																													comparisonRest (
																														comparisonOperator <=
																													)
																													(
																														additionExpression (
																															multiplicationExpression (
																																unaryExpression (
																																	postfixExpression (
																																		primaryExpression (
																																			constant 20
																																		))))))))))))))
																					))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						assignTest
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				(
																					expression (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression flag
																														)))))))))
																						(
																							assignmentRest = (
																								assignmentExpression (
																									logicalOrExpression (
																										logicalAndExpression (
																											equalityExpression (
																												comparisonExpression (
																													additionExpression (
																														multiplicationExpression (
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression true
																																)))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						maxValue
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression max
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression a
																														))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression b
																														)))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type float
						)
						calcResult
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression calculate
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression a
																														))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression f
																														))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression flag
																														)))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						fact5
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression factorial
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 5
																															))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						exprWithCall
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression a
																		))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression factorial
																			)
																			(
																				functionCallArgs (
																					(
																						argList (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression (
																																	constant 3
																																))))))))))))
																					))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						nestedCall
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression max
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression factorial
																														)
																														(
																															functionCallArgs (
																																(
																																	argList (
																																		assignmentExpression (
																																			logicalOrExpression (
																																				logicalAndExpression (
																																					equalityExpression (
																																						comparisonExpression (
																																							additionExpression (
																																								multiplicationExpression (
																																									unaryExpression (
																																										postfixExpression (
																																											primaryExpression (
																																												constant 2
																																											))))))))))))
																																)))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression factorial
																														)
																														(
																															functionCallArgs (
																																(
																																	argList (
																																		assignmentExpression (
																																			logicalOrExpression (
																																				logicalAndExpression (
																																					equalityExpression (
																																						comparisonExpression (
																																							additionExpression (
																																								multiplicationExpression (
																																									unaryExpression (
																																										postfixExpression (
																																											primaryExpression (
																																												constant 3
																																											))))))))))))
																																))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						maxArrayValue
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression max
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression numbers
																														)
																														(
																															arrayAccess [ (
																																expression (
																																	assignmentExpression (
																																		logicalOrExpression (
																																			logicalAndExpression (
																																				equalityExpression (
																																					comparisonExpression (
																																						additionExpression (
																																							multiplicationExpression (
																																								unaryExpression (
																																									postfixExpression (
																																										primaryExpression (
																																											constant 1
																																										))))))))))))
																															]))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression numbers
																														)
																														(
																															arrayAccess [ (
																																expression (
																																	assignmentExpression (
																																		logicalOrExpression (
																																			logicalAndExpression (
																																				equalityExpression (
																																					comparisonExpression (
																																						additionExpression (
																																							multiplicationExpression (
																																								unaryExpression (
																																									postfixExpression (
																																										primaryExpression (
																																											constant 3
																																										))))))))))))
																															])))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						statement (
							ifStatement if (
								(
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression (
																															constant 0
																														))))))))))))
																			])))))
														(
															comparisonRest (
																comparisonOperator >
															)
															(
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression numbers
																			)
																			(
																				arrayAccess [ (
																					expression (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															))))))))))))
																				]))))))))))))
								)
							(
								block { (
									blockItem (
										statement (
											nonIfStatement (
												expression (
													assignmentExpression (
														logicalOrExpression (
															logicalAndExpression (
																equalityExpression (
																	comparisonExpression (
																		additionExpression (
																			multiplicationExpression (
																				unaryExpression (
																					postfixExpression (
																						primaryExpression numbers
																					)
																					(
																						arrayAccess [ (
																							expression (
																								assignmentExpression (
																									logicalOrExpression (
																										logicalAndExpression (
																											equalityExpression (
																												comparisonExpression (
																													additionExpression (
																														multiplicationExpression (
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression (
																																		constant 2
																																	))))))))))))
																						])))))))))
													(
														assignmentRest = (
															assignmentExpression (
																logicalOrExpression (
																	logicalAndExpression (
																		equalityExpression (
																			comparisonExpression (
																				additionExpression (
																					multiplicationExpression (
																						unaryExpression (
																							postfixExpression (
																								primaryExpression numbers
																							)
																							(
																								arrayAccess [ (
																									expression (
																										assignmentExpression (
																											logicalOrExpression (
																												logicalAndExpression (
																													equalityExpression (
																														comparisonExpression (
																															additionExpression (
																																multiplicationExpression (
																																	unaryExpression (
																																		postfixExpression (
																																			primaryExpression (
																																				constant 0
																																			))))))))))))
																								])))))))))))))
											;)))
								})
							(
								elseClause else (
									block { (
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression numbers
																						)
																						(
																							arrayAccess [ (
																								expression (
																									assignmentExpression (
																										logicalOrExpression (
																											logicalAndExpression (
																												equalityExpression (
																													comparisonExpression (
																														additionExpression (
																															multiplicationExpression (
																																unaryExpression (
																																	postfixExpression (
																																		primaryExpression (
																																			constant 2
																																		))))))))))))
																							])))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression numbers
																								)
																								(
																									arrayAccess [ (
																										expression (
																											assignmentExpression (
																												logicalOrExpression (
																													logicalAndExpression (
																														equalityExpression (
																															comparisonExpression (
																																additionExpression (
																																	multiplicationExpression (
																																		unaryExpression (
																																			postfixExpression (
																																				primaryExpression (
																																					constant 1
																																				))))))))))))
																									])))))))))))))
												;)))
									})))))
				(
					blockItem (
						declaration (
							type int
						)
						j
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			)))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								whileStatement while (
									(
										expression (
											assignmentExpression (
												logicalOrExpression (
													logicalAndExpression (
														equalityExpression (
															comparisonExpression (
																additionExpression (
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression j
																			)))))
															(
																comparisonRest (
																	comparisonOperator <
																)
																(
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression (
																						constant 5
																					)))))))))
													(
														logicalAndRest && (
															equalityExpression (
																comparisonExpression (
																	additionExpression (
																		multiplicationExpression (
																			unaryExpression (
																				postfixExpression (
																					primaryExpression numbers
																				)
																				(
																					arrayAccess [ (
																						expression (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression j
																															)))))))))))
																					])))))
																(
																	comparisonRest (
																		comparisonOperator <
																	)
																	(
																		additionExpression (
																			multiplicationExpression (
																				unaryExpression (
																					postfixExpression (
																						primaryExpression (
																							constant 100
																						))))))))))))))
									)
								(
									block { (
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression numbers
																						)
																						(
																							arrayAccess [ (
																								expression (
																									assignmentExpression (
																										logicalOrExpression (
																											logicalAndExpression (
																												equalityExpression (
																													comparisonExpression (
																														additionExpression (
																															multiplicationExpression (
																																unaryExpression (
																																	postfixExpression (
																																		primaryExpression j
																																	)))))))))))
																							])))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression numbers
																								)
																								(
																									arrayAccess [ (
																										expression (
																											assignmentExpression (
																												logicalOrExpression (
																													logicalAndExpression (
																														equalityExpression (
																															comparisonExpression (
																																additionExpression (
																																	multiplicationExpression (
																																		unaryExpression (
																																			postfixExpression (
																																				primaryExpression j
																																			)))))))))))
																									])))
																						(
																							multiplicationExpressionRest (
																								multDivModOperator *
																							)
																							(
																								unaryExpression (
																									postfixExpression (
																										primaryExpression (
																											constant 2
																										)))))))))))))))
												;)))
									(
										blockItem (
											statement (
												nonIfStatement (
													expression (
														assignmentExpression (
															logicalOrExpression (
																logicalAndExpression (
																	equalityExpression (
																		comparisonExpression (
																			additionExpression (
																				multiplicationExpression (
																					unaryExpression (
																						postfixExpression (
																							primaryExpression j
																						)))))))))
														(
															assignmentRest = (
																assignmentExpression (
																	logicalOrExpression (
																		logicalAndExpression (
																			equalityExpression (
																				comparisonExpression (
																					additionExpression (
																						multiplicationExpression (
																							unaryExpression (
																								postfixExpression (
																									primaryExpression j
																								))))
																					(
																						additionExpressionRest (
																							addSubtractOperator +
																						)
																						(
																							multiplicationExpression (
																								unaryExpression (
																									postfixExpression (
																										primaryExpression (
																											constant 1
																										)))))))))))))))
												;)))
									})))))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression numbers
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression (
																															constant 4
																														))))))))))))
																			]))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression factorial
																			)
																			(
																				functionCallArgs (
																					(
																						argList (
																							assignmentExpression (
																								logicalOrExpression (
																									logicalAndExpression (
																										equalityExpression (
																											comparisonExpression (
																												additionExpression (
																													multiplicationExpression (
																														unaryExpression (
																															postfixExpression (
																																primaryExpression numbers
																															)
																															(
																																arrayAccess [ (
																																	expression (
																																		assignmentExpression (
																																			logicalOrExpression (
																																				logicalAndExpression (
																																					equalityExpression (
																																						comparisonExpression (
																																							additionExpression (
																																								multiplicationExpression (
																																									unaryExpression (
																																										postfixExpression (
																																											primaryExpression (
																																												constant 0
																																											))))))))))))
																																])))
																													(
																														multiplicationExpressionRest (
																															multDivModOperator /
																														)
																														(
																															unaryExpression (
																																postfixExpression (
																																	primaryExpression (
																																		constant 10
																																	)))))))))))))
																					)))))))))))))
								;))))
				})))
	<EOF>)