(
	program (
		declaration (
			type int
		)
		y
		(
			declarationRemainder (
				variableInitializer = (
					expression (
						assignmentExpression (
							logicalOrExpression (
								logicalAndExpression (
									equalityExpression (
										comparisonExpression (
											additionExpression (
												multiplicationExpression (
													unaryExpression (
														postfixExpression (
															primaryExpression (
																constant 10
															)))))))))))))
			;))
	(
		declaration (
			type int
		)
		h
		(
			declarationRemainder (
				
			)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						x
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 1
																			)))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 3
																				))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type float
						)
						y
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 4.2
																			)))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 6.9
																				))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						sid
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression arr
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression idx
																													)))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			))))))))))))
								;))))
				})))
	(
		declaration (
			type int
		)
		addInt
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						x)
					,
					(
						parameter (
							type int
						)
						y))
				)
			(
				block { (
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression x
																		))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression y
																			))))))))))))
								;))))
				})))
	<EOF>)