(
	program (
		declaration (
			type int
		)
		printInt
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						x))
				)
			(
				block { (
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression _printInt
																	)
																	(
																		functionCallArgs (
																			(
																				argList (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression x
																													)))))))))))
																			))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			))))))))))))
								;))))
				})))
	(
		declaration (
			type void
		)
		printFloat
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type float
						)
						x))
				)
			(
				block { (
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression _printFloat
																	)
																	(
																		functionCallArgs (
																			(
																				argList (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression x
																													)))))))))))
																			))))))))))))
							;)))
				})))
	(
		declaration (
			type int
		)
		main
		(
			declarationRemainder (
				
			)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						addInt
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 1
																			)))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 2050
																				))))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								expression (
									assignmentExpression (
										logicalOrExpression (
											logicalAndExpression (
												equalityExpression (
													comparisonExpression (
														additionExpression (
															multiplicationExpression (
																unaryExpression (
																	postfixExpression (
																		primaryExpression printInt
																	)
																	(
																		functionCallArgs (
																			(
																				argList (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression addInt
																													)))))))))))
																			))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 0
																			)))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 0
																				)))))))))))))
								;))))
				})))
	<EOF>)