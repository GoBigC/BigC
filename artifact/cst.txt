(
	program (
		declaration (
			type int
		)
		x
		(
			arrayNotation [ (
				expression (
					assignmentExpression (
						logicalOrExpression (
							logicalAndExpression (
								equalityExpression (
									comparisonExpression (
										additionExpression (
											multiplicationExpression (
												unaryExpression (
													postfixExpression (
														primaryExpression (
															constant 3
														))))))))))))
			])
		(
			declarationRemainder ;
		))
	(
		declaration (
			type int
		)
		main
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						arg))
				)
			(
				block { (
					blockItem (
						declaration (
							type int
						)
						y
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 3
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						c
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression x
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression (
																															constant 1
																														))))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						d
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression x
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression y
																													)))))))))))
																			]))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						t
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression addInt
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															)))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 4
																															))))
																												(
																													multiplicationExpressionRest (
																														multDivModOperator /
																													)
																													(
																														unaryExpression (
																															postfixExpression (
																																primaryExpression (
																																	constant 0
																																)))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type char
						)
						c
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 10
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type bool
						)
						test_bool
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 'a'
																			)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						op
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant true
																			)))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression (
																					constant 1
																				))))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						b
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression addInt
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															)))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 't'
																															))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type int
						)
						a
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression addInt
																		)
																		(
																			functionCallArgs (
																				(
																					argList (
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 1
																															)))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 2
																															)))))))))))
																					,
																					(
																						assignmentExpression (
																							logicalOrExpression (
																								logicalAndExpression (
																									equalityExpression (
																										comparisonExpression (
																											additionExpression (
																												multiplicationExpression (
																													unaryExpression (
																														postfixExpression (
																															primaryExpression (
																																constant 3
																															))))))))))))
																				)))))))))))))
							;)))
				(
					blockItem (
						declaration (
							type char
						)
						z
						(
							declarationRemainder (
								variableInitializer = (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 'c'
																			)))))))))))))
							;)))
				(
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression x
																		)
																		(
																			arrayAccess [ (
																				expression (
																					assignmentExpression (
																						logicalOrExpression (
																							logicalAndExpression (
																								equalityExpression (
																									comparisonExpression (
																										additionExpression (
																											multiplicationExpression (
																												unaryExpression (
																													postfixExpression (
																														primaryExpression z
																													)))))))))))
																			])))))))))))
								;))))
				})))
	(
		declaration (
			type int
		)
		addInt
		(
			declarationRemainder (
				(
					parameterList (
						parameter (
							type int
						)
						x)
					,
					(
						parameter (
							type int
						)
						y))
				)
			(
				block { (
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression x
																		))))
															(
																additionExpressionRest (
																	addSubtractOperator +
																)
																(
																	multiplicationExpression (
																		unaryExpression (
																			postfixExpression (
																				primaryExpression y
																			))))))))))))
								;))))
				})))
	(
		declaration (
			type bool
		)
		testReturnType
		(
			declarationRemainder (
				
			)
			(
				block { (
					blockItem (
						statement (
							nonIfStatement (
								returnStatement return (
									expression (
										assignmentExpression (
											logicalOrExpression (
												logicalAndExpression (
													equalityExpression (
														comparisonExpression (
															additionExpression (
																multiplicationExpression (
																	unaryExpression (
																		postfixExpression (
																			primaryExpression (
																				constant 'h'
																			))))))))))))
								;))))
				})))
	<EOF>)